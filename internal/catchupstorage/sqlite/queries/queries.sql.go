// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package queries

import (
	"context"
	"strings"
)

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO messages (to_number, created_at, protobuf_data) VALUES (?, ?, ?)
`

type InsertMessageParams struct {
	ToNumber     string
	CreatedAt    int64
	ProtobufData []byte
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage, arg.ToNumber, arg.CreatedAt, arg.ProtobufData)
	return err
}

const messagesAfter = `-- name: MessagesAfter :many
SELECT id, to_number, created_at, protobuf_data FROM messages WHERE
	id >= ? AND
	created_at >= ?
	AND to_number IN (/*SLICE:to_numbers*/?)
LIMIT 100
`

type MessagesAfterParams struct {
	ID        int64
	CreatedAt int64
	ToNumbers []string
}

func (q *Queries) MessagesAfter(ctx context.Context, arg MessagesAfterParams) ([]Message, error) {
	query := messagesAfter
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ID)
	queryParams = append(queryParams, arg.CreatedAt)
	if len(arg.ToNumbers) > 0 {
		for _, v := range arg.ToNumbers {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:to_numbers*/?", strings.Repeat(",?", len(arg.ToNumbers))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:to_numbers*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ToNumber,
			&i.CreatedAt,
			&i.ProtobufData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
