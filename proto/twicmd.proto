syntax = "proto3";

package twicmd;

import "twicmdcfg.proto";
import "twisms.proto";

option go_package = "github.com/twipi/twipi/proto/out/twicmdproto";

// A service that provides commands to be executed.
message Service {
  // The name of the service. Each service registers its own single-word name,
  // usually the brand name, to be used in this.
  string name = 1;
  // The human-readable description of the service.
  string description = 3;
  // The list of descriptions of commands that the service provides.
  repeated CommandDescription commands = 2;
  // The human-readable name of the service.
  // This name can be the full and properly captalized name of the service.
  optional string human_name = 7;
  // The URL of the service's icon.
  optional string icon_url = 4;
  // The optional brand color of the service.
  optional string color = 5;
  // The optional control panel schema of the service.
  optional twicmdcfg.Schema options_schema = 6;
}

// A description of a command that the service provides.
// It mostly contains human-readable information about the command, but some
// data may be used by the natural language processor.
message CommandDescription {
  // The name of the slash command.
  string name = 1;
  // The human-readable description of the command.
  string description = 5;
  // The map of named arguments that the command accepts.
  map<string, CommandArgumentDescription> arguments = 2;
  // The order in which the named arguments are expected.
  // This is only useful for positional parsing.
  // Such a parser must also implement a fallback name=value parser.
  repeated string argument_positions = 3;
  // Whether the command accepts a trailing argument at the end.
  // The last argument in the positions list is considered trailing.
  // This is only meaningful if argument_positions is set.
  bool argument_trailing = 4;
}

// A description of a command argument within a command.
message CommandArgumentDescription {
  // Whether the argument is required.
  bool required = 1;
  // The human-readable description of the argument.
  string description = 2;
  // The hint that the parser will use.
  // The NLP will also use it to determine the argument's context.
  CommandArgumentHint hint = 3;
}

enum CommandArgumentHint {
  COMMAND_ARGUMENT_HINT_UNSPECIFIED = 0;
  COMMAND_ARGUMENT_HINT_STRING = 1;
  COMMAND_ARGUMENT_HINT_NUMBER = 2;
  COMMAND_ARGUMENT_HINT_INTEGER = 3;
  COMMAND_ARGUMENT_HINT_PERSON = 4;
  COMMAND_ARGUMENT_HINT_EMAIL = 5;
  COMMAND_ARGUMENT_HINT_PHONE_NUMBER = 6;
  COMMAND_ARGUMENT_HINT_ADDRESS = 7;
  COMMAND_ARGUMENT_HINT_DURATION = 8;
  COMMAND_ARGUMENT_HINT_DATE = 9;
  // ...
}

// A request to autocomplete an argument.
// It returns a list of possible values for the given argument sorted by
// relevance.
message ArgumentAutocompleteRequest {
  // The name of the service.
  string service = 1;
  // The name of the command.
  string command = 2;
  // The name of the argument within the command.
  string argument = 3;
  // The input to autocomplete.
  // If empty, list as many suggestions as possible.
  string input = 4;
}

// The response to an argument autocompletion request.
message ArgumentAutocompleteResponse {
  repeated string suggestions = 1;
}

// A command to be executed sent by the user.
message Command {
  string service = 1;
  string command = 2;
  repeated CommandArgument arguments = 3;
}

// A command argument.
message CommandArgument {
  string name = 1;
  string value = 2;
}

// The request sent on the POST /execute endpoint.
message ExecuteRequest {
  Command command = 1;
  twisms.Message message = 2;
}

// The response sent back to the user after executing a command.
message ExecuteResponse {
  oneof response {
    // A plain text response.
    // This is the same as the Text field in MessageBody.
    string text = 1;
    // A response with a message body.
    twisms.MessageBody body = 2;
    // A system response, including errors.
    // These responses may be localized or transformed.
    string status = 3;
  }
}
